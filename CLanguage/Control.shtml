<HTML>
<HEAD>
<TITLE>Control</TITLE>
<link rel="stylesheet" href="../styles.css">
</HEAD>
<BODY ALIGN=JUSTIFY>
<HR><!------------------------------------------------------------------------>
<CENTER>
<H1>Control</H1>
</CENTER>
Last modified Sunday, 23-Oct-2016 18:53:32 EDT.
<HR><!------------------------------------------------------------------------>
<UL>
<LI> Basic operators
     <UL>
     <LI> Arithmetic operators
          <UL>
          <LI> Binary <TT>+</TT>, <TT>-</TT>, <TT>*</TT>, <TT>/</TT>,
               <TT>%</TT>, and unary <TT>+</TT> and <TT>-</TT>.
               Precedence and associativity to be discussed later.
          <LI> The <TT>libm.a</TT> library has maths functions, prototyped in
               <TT>math.h</TT>.
          </UL>
     <LI> Relational and logical operators.
          <UL>
          <LI> Relational <TT>&gt;</TT>, <TT>&gt;=</TT>, <TT>&lt;</TT>,
               <TT>&lt;=</TT>, <TT>==</TT>, <TT>!=</TT>.
               These have lower precedence than arithmetic operators.
          <LI> Logical connectives <TT>&&</TT>, <TT>||</TT>.
               Expressions connected by these are evaluated left to right.
               Thus in
               <PRE>
for (Index = 0; Index &lt; STRING_LENGTH-1 && (C1=getchar()) != '\n' && C1 != EOF; Index++) {
    MyString[Index]=C1;
} </PRE>
               the order is useful in that it's necessary to check there
               is space to store the character before reading it. If not
               the evaluation will stop before the <TT>getchar()</TT>.
          <LI> Unary negation <TT>!</TT> which convertes non-0 (true) operands
               into 0 and a 0 (false) operand into 1.
          </UL>
     <LI> Increment and decrement.
          <UL>
          <LI> <TT>++</TT> and <TT>--</TT> can be prefix or postfix.
               If used prefix the increment/decrement takes place before the
               variable is used, and if postfix the increment/decrement takes
               place after the variable is used.
          <LI> <A HREF="MyCode/SqueezeThis.c"><TT>SqueezeThis.c</TT></A>
               - Program that squeezes a string
          </UL>
     <LI> Bitwise logical operators
          <UL>
          <LI> These may be applied to <TT>char</TT>, <TT>short</TT>,
               <TT>int</TT>, <TT>long</TT> (<TT>signed</TT> or
               <TT>unsigned</TT>).
          <LI> <TT>&</TT> = bitwise AND. Useful for masking off bits.
          <LI> <TT>|</TT> = bitwise inclusive OR. Useful for turning on bits.
          <LI> <TT>^</TT> = bitwise exclusive OR.
          <LI> <TT>&lt;&lt;</TT> = left shift.
               This shifts the bits of the left operand left by the number of
               bit positions specified by the right operand, filling the lsbs
               with zero. Useful for creating masks.
          <LI> <TT>>></TT> = right shift. See <TT>&lt;&lt;</TT>, but fill
               depends on whether or not sign extension is used for "-ve"
               bit patterns.
          <LI> <TT>~</TT> = one's complement, i.e. inverts all bits.
          <LI> <A HREF="MyCode/PlayBits.c"><TT>PlayBits.c</TT></A>
               - Program that plays with bits
          </UL>
     </UL>

<P>
<LI> Funky expressions
     <UL>
     <LI> Assignment operators and expressions.
          <UL>
          <LI> Expressions of the form
               <PRE>
&lt;variable> = &lt;variable> &lt;operation> &lt;expression> </PRE>
               can be rewritten in the form<BR>
               <PRE>
&lt;variable> &lt;operation>= &lt;expression> </PRE>
               if <TT>&lt;operation></TT> is one of <TT>+</TT>, <TT>-</TT>,
<TT>*</TT>, <TT>/</TT>, <TT>%</TT>, <TT>&lt;&lt;</TT>, <TT>>></TT>,
<TT>&</TT>, <TT>^</TT>, <TT>|</TT>.
          <LI> This is great if the variable is very complex.
          </UL>
     <LI> Conditional expressions.
          <UL>
          <LI> Statements of the form
               <PRE>
if (&lt;expression1>)
    &lt;variable> = &lt;expression2>;
else &lt;variable> = &lt;expression3>; </PRE>
               can be rewritten in the form
               <PRE>
&lt;variable> = &lt;expression1> ? &lt;expression2> : &lt;expression3> </PRE>
          <LI> The <TT>?:</TT> operator contructs genuine expressions,
               which may be used like any other expression.
          <LI> If <TT>&lt;expression2></TT> and <TT>&lt;expression3></TT>
               are of different types the result is determined by the mixed
               expression conversion rules.
          </UL>
     <LI> <A HREF="MyCode/FunkyExpressions.c"><TT>FunkyExpressions.c</TT></A>
          - Program that uses funky expressions
     <LI> Multiple expressions.
          <UL>
          <LI> A pair of expressions separated by a comma is an expression.
               They are evaluated left-to-right and have the value of the
               right expression.
          <LI> These appear most frequently in for loops. See later.
          <LI> Beware confusion with other <TT>,</TT>s, such as in actual
               arguments.  <TT>()</TT> should be used to avoid abiguity.
          </UL>
     </UL>

<P>
<LI> Sizeof
     <UL>
     <LI> The <TT>sizeof</TT> function returns an integral value giving
          the number of bytes required to store an object.
     <LI> The result type is defined as <TT>size_t</TT> in
          <TT>&lt;stddef.h></TT>.
     <LI> <A HREF="MyCode/SizeOf.c"><TT>SizeOf.c</TT></A>
          - Program that tells the size of various types
     </UL>

<P>
<LI> Precedence and order of evaluation.
     <TABLE>
     <TR> <TH ALIGN=LEFT> Operator
          <TH ALIGN=LEFT> Associativity
     <TR> <TD COLSPAN=2> <HR>
     <TR> <TD> <TT>()</TT>  <TT>func()</TT>  <TT>[]</TT>  <TT>-></TT>
               <TT>.</TT>
          <TD> left to right
     <TR> <TD> <TT>!</TT>   <TT>~</TT>   <TT>++</TT>  <TT>--</TT>  <TT>+</TT>
               <TT>-</TT>  <TT>(&lt;type>)</TT>  <TT>*</TT>  <TT>&</TT>
               <TT>sizeof</TT>
          <TD> right to left
     <TR> <TD> <TT>*</TT>   <TT>/</TT>   <TT>%</TT>
          <TD> left to right
     <TR> <TD> <TT>+</TT>   <TT>-</TT>
          <TD> left to right
     <TR> <TD> <TT>&lt;&lt;</TT>  <TT>>></TT>
          <TD> left to right
     <TR> <TD> <TT>&lt;</TT>   <TT>&lt;=</TT>  <TT>></TT>  <TT>>=</TT>
          <TD> left to right
     <TR> <TD> <TT>==</TT>  <TT>!=</TT>
          <TD> left to right
     <TR> <TD> <TT>&</TT>
          <TD> left to right
     <TR> <TD> <TT>^</TT>
          <TD> left to right
     <TR> <TD> <TT>|</TT>
          <TD> left to right
     <TR> <TD> <TT>&&</TT>
          <TD> left to right
     <TR> <TD> <TT>||</TT>
          <TD> left to right
     <TR> <TD> <TT>?:</TT>
          <TD> right to left
     <TR> <TD> <TT>=</TT>   <TT>&lt;operator>=</TT>
          <TD> right to left
     <TR> <TD> <TT>,</TT>
          <TD> left to right
     </TABLE>
     <UL>
     <LI> The level 2 <TT>+</TT> and <TT>-</TT> operators are unary plus
          and minus while the level 4 <TT>+</TT> and <TT>-</TT> are binary.
     <LI> The level 2 <TT>*</TT> and <TT>&</TT> operators are for address
          arithmetic while the level 3 <TT>*</TT> is multiplication and the
          level 8 <TT>&</TT> is bitwise AND.
     <LI> The associativity specifies the natural bracketing of
          expressions using the same operator repeatedly. e.g.,
          <PRE>
&lt;expression1> || &lt;expression2> || &lt;expression3> </PRE>
          is seen as
          <PRE>
(&lt;expression1> || &lt;expression2>) || &lt;expression3> </PRE>
          while
          <PRE>
&lt;variable1> += &lt;variable2> += &lt;expression1> </PRE>
          is seen as
          <PRE>
&lt;variable1> += (&lt;variable2> += &lt;expression1>) </PRE>
     <LI> The order of evaluation of operands of an operator (except
          <TT>&&</TT>, <TT>||</TT>, <TT>?:</TT>, and <TT>,</TT>) is
          unspecified.
          To force a particular order temporary variables should be used.
     <LI> The order of evaluation of of operands in an expression and
          arguments to functions is not specified. To force an order
          temporary variables should be used.
     </UL>

<P>
<LI> Statements and Blocks.
     <UL>
     <LI> An expression such as assignment, function call etc becomes a
          statement when it is followed by a semi-colon. The semi-colon
          is a statement terminator.
     <LI> <TT>{}</TT> brackets are used to group statements into compound
          statements, or blocks.
     </UL>

<P>
<LI> Selection statements
     <UL>
     <LI> If and If-else
          <PRE>
if (&lt;expression>) {
    &lt;true stuff>
}

if (&lt;expression>) {
    &lt;true stuff>
} else {
    &lt;false stuff>
} </PRE>
          <UL>
          <LI> The test is on the numeric value of the expression.
               0 = FALSE; non-0 = TRUE.
          <LI> The hanging-else problem may occur.
          </UL>
     <LI> Switch.
          <UL>
          <LI> <A HREF="MyCode/SwitchChar.c"><TT>SwitchChar.c</TT></A>
               - Using <TT>switch</TT> to act according to character.
          <LI> The <TT>switch</TT> searches for a label corresponding to
               the switch value and starts execution there.
          <LI> The <TT>break</TT> is used to exit from the switch, otherwise
               all statements below the start of execution would be executed
               (called fall-through).
               Put <TT>break</TT> after the last case, even though it is not
               necessary - it makes it easier to add another case later.
          <LI> The <TT>default</TT> case is optional, and will execute if no
               other case is selected.
          <LI> The case labels must be constant and unique, and can only be
               of integral type.
          </UL>
     </UL>

<P>
<LI> Loops
     <UL>
     <LI> For loops
          <PRE>
for (&lt;exp1>;&lt;exp2>;&lt;exp3>) {
    &lt;statement>
} </PRE>
          <UL>
          <LI> Any of the three expressions of a for loop may be omitted.
               Omitting <TT>&lt;exp2></TT> makes the condition TRUE always.
          <LI> The limits and controlling variable may be altered within a
               for loop but it is bad style.
          <LI> The controlling variable retains its value after the loop is
               exited.
          <LI> The comma operator appears in <TT>&lt;exp1></TT> and
               <TT>&lt;exp3></TT> when more than one variable needs to be
               initialised or updated.
          <LI> Compound statements are used for clarity and survival
          <LI> <A HREF="MyCode/ReverseString.c"><TT>ReverseString.c</TT></A>
               - Program that reverses a string in place
          </UL>
     <LI> While loops
          <PRE>
&lt;exp1>
while (&lt;exp2>) {
    &lt;statement>
    &lt;exp3>;
} </PRE>
          <UL>
          <LI> There is an equivalence between for and while loops.
               <PRE>
for (&lt;exp1>;&lt;exp2>;&lt;exp3>) {
    &lt;statement>
} </PRE>
          </UL>
     <LI> Do-while loops
          <UL>
          <LI> <A HREF="MyCode/NumberToString.c"><TT>NumberToString.c</TT></A>
               - Program that converts an integer to a string
          <LI> Compound statements are used for clarity and survival
          </UL>
     </UL>

<P>
<LI> Uncontrolled loops
     <UL>
     <LI> Continue
          <UL>
          <LI> Causes the rest of the body of a <TT>for</TT>, <TT>while</TT>
               or <TT>do</TT> loop not to be executed.
          <LI> <A HREF="MyCode/Continue.c"><TT>Continue.c</TT></A>
               - Program that sums the positive numbers input
          <LI> Simple cases are better implemented with if-else.
          </UL>
     <LI> Break
          <UL>
          <LI> <A HREF="MyCode/BreakLoop.c"><TT>BreakLoop.c</TT></A>
               - Using break to exit a loop
          <LI> Used to exit from <TT>for</TT>, <TT>while</TT>, <TT>do</TT> and
               <TT>switch</TT>.
               The only structured use is in the switch statement.
          </UL>
     </UL>

<P>
<LI> Exit
     <PRE>
if (&lt;everything went ok>) {
    exit(EXIT_SUCCESS);
} else {
    exit(EXIT_FAILURE);
} </PRE>
     <UL>
     <LI> This closes any open files (see later) and exits the program
          to the parent process (operating system usually) and returns
          the return value.
     <LI> 0 is usually used for normal termination, non-0 for error.
     <LI> This is actually based on a UNIX system call, but implemented
          appropriately in other systems.
     </UL>

<P>
<LI> Goto's and Labels.
     <PRE>
for (   )
    for (    )
        for (    )
            if (disaster)
                goto error;
    .........
error:    /*----Sort out the mess */ </PRE>
     <UL>
     <LI> The <TT>goto &lt;label></TT> can be used to jump directly to a label.
     <LI> A label is an identifier followed by a colon.
     <LI> Not a good thing - only real use is in error situations.
     </UL>

<P>
</UL>

<P>
<HR><!------------------------------------------------------------------------>
<H2> Exercises </H2>
<UL>
<LI> Write <TT>char lower(char c1)</TT> which returns the lower case of
     <TT>c1</TT>, using a conditional expression to test for that case
     of <TT>c1</TT>.
<LI> Write <TT>void expand(char s1[],char s2[])</TT> which converts
     non-printing characters (such as new line, tab, etc) in <TT>s1</TT> to
     visible sequences (such as <TT>\n</TT>, <TT>\t</TT>, etc) in s2.
     Use a switch to select the visible sequence for each non-printing
     character.
<LI> Write <TT>int invert(unsigned input,int position,int number)</TT> that
     returns the input value with the number bits that begin at
     position (counting from the right), inverted.
     Other bits should be left unchanged.
     <BR><STRONG>Answer</STRONG>:
     <A HREF="MyCode/InvertBits.c"><TT>InvertBits.c</TT></A>
<LI> Write <TT>void itob(int number,char s1[],int base)</TT> that converts
     the number to a character string in the base. For example
     <TT>itob(i1,s1,16)</TT> puts <TT>i1</TT> in hex format into <TT>s1</TT>.
<LI> Exercise 12306<BR>
     Given as input three integers representing a date as day, month, year,
     print out the number day, month and year for the following day's date.
     Typical run:
     <PRE>
28 2 1992
Date following 28:02:1992 is 29:02:1992
     </PRE>
<LI> Write a program which reads two integer values. If the first is less than
     the second, print the message "up". If the second is less than the first,
     print the message "down". If the numbers are equal, print the message
     "equal". If there is an error reading the data, print a message
     containing the word <TT>Error</TT> and perform <TT>exit(0)</TT>;
<LI> Exercise 12327<BR>
     Write a program to read in 10 numbers and compute the average, maximum and
     minimum values.
<LI> Exercise 12328<BR>
     Write a program to read in numbers until the number -999 is encountered.
     The sum of all number read until this point should be printed out.
<LI> Exercise 12329<BR>
     Write a program which will read an integer value for a base,
     then read a positive integer written to that base and print its value.
     Read the second integer a character at a time; skip over any leading
     non-valid (i.e. not a digit between zero and "base-1") characters,
     then read valid characters until an invalid one is encountered.
     <PRE>
           Input       Output
        ==========     ======
        10    1234      1234
         8      77        63   (the value of 77 in base 8, octal)
         2    1111        15   (the value of 1111 in base 2, binary)
     </PRE>
     The base will be less than or equal to 10.
<LI> Read in three values representing respectively
     a capital sum (integer number of cents),
     a rate of interest in percent (float),
     and a number of years (integer).
     Compute the values of the capital sum with compound interest added over
     the given period of years. Each year's interest is calculated as
     <P>
     interest = capital * interest_rate / 100;
     <P>
     and is added to the capital sum by
     <P>
     capital += interest;
     <P>
     Print out money values as dollars (cents / 100.0) accurate to two
     decimal places.
     Print out a floating value for the value with compound interest
     for each year up to the end of the period.
     Print output year by year in a form such as:
     <PRE>
Original sum 30000.00 at  12.5 percent for 20 years

Year Interest  Sum
----+-------+--------
  1  3750.00 33750.00
  2  4218.75 37968.75
  3  4746.09 42714.84
  4  5339.35 48054.19
  5  6006.77 54060.96
  6  6757.62 60818.58
  7  7602.32 68420.90
  8  8552.61 76973.51
  9  9621.68 86595.19
 10 10824.39 97419.58
     </PRE>
<LI> Read a positive integer value, and compute the following sequence:
     If the number is even, halve it; if it's odd, multiply by 3 and add 1.
     Repeat this process until the value is 1, printing out each value.
     Finally print out how many of these operations you performed.
     Typical output might be:
     <PRE>
 Inital value is 9
 Next value is  28
 Next value is  14
 Next value is   7
 Next value is  22
 Next value is  11
 Next value is  34
 Next value is  17
 Next value is  52
 Next value is  26
 Next value is  13
 Next value is  40
 Next value is  20
 Next value is  10
 Next value is   5
 Next value is  16
 Next value is   8
 Next value is   4
 Next value is   2
 Final value 1, number of steps 19
     </PRE>
     If the input value is less than 1, print a message containing the word
     <TT>Error</TT> and perform an <TT>exit(0);</TT>.
<LI> Write a program to count the vowels and letters in free text given as
     standard input.
     Read text a character at a time until you encounter end-of-data.
     Then print out the number of occurrences of each of the
     vowels a, e, i, o and u in the text,
     the total number of letters,
     and each of the vowels as an integer percentage of the letter total.
     Suggested output format is:
     <PRE>
Numbers of characters:
a   3 ; e   2 ; i   0 ; o   1 ; u   0 ; rest  17
Percentages of total:
a  13%; e   8%; i   0%; o   4%; u   0%; rest  73%
     </PRE>
     Read characters to end of data using a construct such as
     <PRE>
char ch;
while ((ch = getchar()) >= 0) {
/* ch is the next character */
    ....
}
     </PRE>
     to read characters one at a time using <TT>getchar()</TT> until
     a negative value is returned.
<LI> Read a file of English text, and print it out one word per line, all
     punctuation and non-alpha characters being omitted.
     For end-of-data, the program loop should
     read until <TT>getchar</TT> delivers a value &lt;= 0. When typing input,
     end the data by typing the end-of-file character, usually control-D. When
     reading from a file, <TT>getchar</TT> will deliver a negative value
     when it encounters the end of the file.
     Typical output might be
     <PRE>
Read
a
file
of
English
text
and
print
it
out
one
     </PRE>
</UL>

<P>
<HR><!------------------------------------------------------------------------>
<H2> Exam Style Questions </H2>
<UL>
<LI> Any of the short <A HREF="#Exercises">exercises</A>.
<LI> What is the output from the following code segment?
     <PRE>
int i1 = 27;
int i2 = 29;

if (i1++ >=  --i2) {
    i1++;
    printf("%d %d\n",i1++,i2--);
} else {
    i2++;
    printf("%d %d\n",--i1,++i2);
}
printf("%d %d\n",i1,i2); </PRE>
<LI> Assuming that the bits in an integer are numbered from 0, from right
     (least significant) to left (most significant), write an expression
     using bitwise logical operators to extract the 4 bits numbered 6 to 3
     from an integer <TT>i1</TT>, and shift them all down so that bit
     numbered 3 ends up in position number 1.
<LI> Explain how a conditional expression may be rewritten using an
     <TT>if-then-else</TT> statement.
<LI> Rewrite the following <TT>for</TT> loop as a <TT>while</TT> loop.i
     <PRE>
for (Index = 1;Index < MAX;Index++) {
    printf("%d\n",Index);
    Total += Index;
} </PRE>
<LI> Rewrite the following <TT>while</TT> loop as a <TT>for</TT> loop.
     <PRE>
Index = 1;
while (Index < MAX) {
    printf("%d\n",Index);
    Total += Index;
    Index++;
} </PRE>
<LI> Explain the difference between <TT>continue</TT> and <TT>break</TT>
     statements.
<LI> What is the output from the following code segment?
     <PRE>
    Index = 1;
    while (Index < 30) {
        if (Index % 2 == 0) {
            Index = Index < 10 ? ++Index : Index +3;
            continue;
        }
        Index = (Index << 1) + 1;
        if (Index % 6 == 0) {
            break;
        }
        printf("%d\n",Index);
    } </PRE>
</UL>

<P>
<HR><!------------------------------------------------------------------------>
</BODY>
</HTML>
